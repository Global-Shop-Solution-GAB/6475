Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Progressive Billing")
Gui.Form..Size(7230,6885)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(True)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form.lbl1.Create(Label,"Total Standard Lines:",True,1680,255,0,90,195,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl1.BorderStyle(0)
Gui.Form.lbl2.Create(Label,"Percentage (10 as for 10%):",True,2220,255,0,90,555,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl2.BorderStyle(0)
Gui.Form.lbl3.Create(Label,"Progressive Line:",True,1485,255,0,90,945,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl3.BorderStyle(0)
Gui.Form.txtTotalLines.Create(TextBox,"",True,1215,300,0,2340,90,False,1,"Arial",8,-2147483643,1)
Gui.Form.txtTotalLines.NumericOnly(1)
Gui.Form.txtPct.Create(TextBox,"",True,1215,300,0,2325,480,True,1,"Arial",8,-2147483643,1)
Gui.Form.txtPct.NumericOnly(1)
Gui.Form.txtPct.Event(LostFocus,txtPct_LostFocus)
Gui.Form.txtPct.Event(KeyPressEnter,txtPct_KeyPressEnter)
Gui.Form.txtProgLine.Create(TextBox,"",True,1215,300,0,2325,885,False,1,"Arial",8,-2147483643,1)
Gui.Form.txtProgLine.NumericOnly(1)
Gui.Form.cmdSave.Create(Button)
Gui.Form.cmdSave.Size(855,375)
Gui.Form.cmdSave.Position(150,1380)
Gui.Form.cmdSave.Caption("Add")
Gui.Form.cmdSave.Event(Click,cmdSave_Click)
Gui.Form.cmdSave.Enabled(True)
Gui.Form.cmdSave.Visible(True)
Gui.Form.cmdSave.Zorder(0)
Gui.Form.cmdSave.FontName("Tahoma")
Gui.Form.cmdSave.FontSize(8.25)
Gui.Form.gsProg.Create(GsGridControl)
Gui.Form.gsProg.Size(6840,4440)
Gui.Form.gsProg.Position(165,1890)
Gui.Form.gsProg.Enabled(True)
Gui.Form.gsProg.Visible(True)
Gui.Form.gsProg.Zorder(0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sOrder.Declare
v.Global.sCustomer.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
'BN, Aug 10, 2019
'Customer: Colorado Correctional Industries
'This program will allow adding a Progress line at the Script 2 button of Order Entry Header by percentage of Total dollar amounts of Standard Lines.
'At the Order Header, select an Order. Script 2 button is named as Progrsv Line.
'The Order needs to have standard lines. Otherwise, we can not access to the custom Progrsv Line screen.
'The Progrsv Line screen will have a Textbox to input a percentage for adding new Progress Billing line
'Percentage will be applied to the total dollar amounts of the order standard lines.
'The new progress billing line number will be the next available line number.
'
'Adaptation by AA, Aug 26,2021
'Customer Marimba One.
'Change this logic to work on the Quote Screen.
F.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare

	'Order Number: v.Passed.000003
	'Customer" v.Passed.000006
	
	F.ODBC.Connection!conx.OpenCompanyConnection(300)
	
	'Order Entry > File > Sales Orders > Open/New
	
	'Populate hook
	f.Intrinsic.Control.If(v.Caller.Hook, =, 10710)
		v.Passed.000201.Set("Progrsv Ln")
	'Script 2
	f.Intrinsic.Control.ElseIf(v.Caller.Hook, =, 10960)
		
		f.Intrinsic.Control.If(v.Passed.000003.Trim,=,"")
			'No Order selected
			f.Intrinsic.UI.Msgbox("Please select a Quote.","Attention")
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			'No Lines entered
			f.Intrinsic.String.LPad(v.Passed.000003.Trim,"0",7,v.Global.sOrder)
			v.Global.sCustomer.Set(v.Passed.000006)
			f.Intrinsic.String.Build("Select * from V_QUOTE_LINES where QUOTE_NO = '{0}' and Line_Type = 'S'",v.Global.sOrder,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.if(v.Local.sRet.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Please enter Order Lines in Lines screen.","Attention")
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf				
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.CallSub("Check_If_Progressive_Ln_Exists")
		gui.Form..Show	
	f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.UnLoad.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare

	F.Intrinsic.Control.If(V.ODBC.con.State,=,1)
		F.ODBC.Connection!con.close
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	f.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.UnLoad.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.CallSub("Unload")
Program.Sub.Form_UnLoad.End

Program.Sub.Check_If_Progressive_Ln_Exists.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.fProgLine.Declare
	v.Local.fTotalLines.Declare
	v.Local.fPct.Declare
	v.Local.sHold.Declare
	v.Local.fCurrentProgressiveLines.Declare
	v.Local.iCnt.Declare
	
	'Get Total of standard lines
	f.Intrinsic.String.Build("Select Sum(Extension) from V_QUOTE_LINES where QUOTE_NO = '{0}' and Line_Type = 'S'",v.Global.sOrder,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.fTotalLines.Set(v.Local.sRet)
	
	'Get Total of Progressive Lines
	f.Intrinsic.String.Build("Select Sum(Extension) from V_QUOTE_LINES where QUOTE_NO = '{0}' and Line_Type = 'S' and Part Like 'PROGRESS%'",v.Global.sOrder,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.fCurrentProgressiveLines.Set(v.Local.sRet)
	
	'Check if Progressive Ln exist
	f.Intrinsic.String.Build("Select QUOTE_NO as QuoteNo,Left(Record_No,3) as Line,ltrim(rtrim(Part)) as Part,ltrim(rtrim(Description)) as Description,Extension as Value from V_QUOTE_LINES where QUOTE_NO = '{0}' and Line_Type = 'S' and Part Like 'PROGRESS%' Order by Line",v.Global.sOrder,v.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.Prog.Exists)
		f.Data.DataTable.Close("Prog")
	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("Prog","conx",v.Local.sSQL,True)
	
	f.Data.DataTable.AddColumn("Prog","Percentage","float")
	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.Prog.RowCount--,1)
		f.Intrinsic.Control.If(v.Local.fTotalLines,<>,0)
			'Calculate Percentage
			f.Intrinsic.Math.Div(v.DataTable.Prog(v.Local.iCnt).Value!FieldValString,v.Local.fTotalLines,v.Local.fPct)
			f.Intrinsic.Math.Mult(v.Local.fPct,100,v.Local.fPct)
			'Set Percentage to label Percentage
			f.Data.DataTable.SetValue("Prog",v.Local.iCnt,"Percentage",v.Local.fPct)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	gui.Form.gsProg.AddGridviewFromDatatable("gvMain","Prog")
	gui.Form.gsProg.SetColumnProperty("gvMain","Line","Width","30")
	gui.Form.gsProg.SetColumnProperty("gvMain","QuoteNo","Width","55")
	gui.Form.gsProg.SetColumnProperty("gvMain","Percentage","Width","65")
	gui.Form.gsProg.SetColumnProperty("gvMain","Value","HeaderHAlignment","far")
	gui.Form.gsProg.SetColumnProperty("gvMain","Percentage","HeaderHAlignment","far")
	gui.Form.gsProg.SetColumnProperty("gvMain","Percentage","Caption","Percentage %")
	gui.Form.gsProg.AddSummaryItem("gvMain","Value","SumValue","Sum","","","n")
	gui.Form.gsProg.AddSummaryItem("gvMain","Percentage","SumValue","Sum","","","n")
	gui.Form.gsProg.SetColumnProperty("gvMain","Value","DisplayCustomNumeric","###,###,###,##0.00")
	gui.Form.gsProg.SetColumnProperty("gvMain","Percentage","DisplayCustomNumeric","###,###,###,##0.00")
	
	gui.Form.gsProg.MainView("gvMain")
	
	'Total Lines
	f.Intrinsic.String.Format(v.Local.fTotalLines,"#,###,###,##0.00",v.Local.sHold)
	gui.Form.txtTotalLines.Text(v.Local.sHold)			
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Check_If_Progressive_Ln_Exists.End

Program.Sub.Calculate_Progressive_Line.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.fPct.Declare
	v.Local.fTotalLines.Declare
	v.Local.fProgLine.Declare
	v.Local.fHold.Declare
	v.Local.sHold.Declare
	
	v.Local.sHold.Set(v.Screen.Form!txtTotalLines.Text.Trim)
	f.Intrinsic.String.Replace(v.Local.sHold,",","",v.Local.fTotalLines)
	v.Local.sHold.Set(v.Screen.Form!txtPct.Text.Trim)
	f.Intrinsic.String.Replace(v.Local.sHold,",","",v.Local.fPct)
	
	f.Intrinsic.Control.If(v.Local.fPct,=,100)
		v.Local.fProgLine.Set(v.Local.fTotalLines)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Mult(v.Local.fTotalLines,v.Local.fPct,v.Local.fHold)
		f.Intrinsic.Math.Div(v.Local.fHold,100,v.Local.fProgLine)	
		f.Intrinsic.Math.Mult(v.Local.fProgLine, -1, v.Local.fProgLine)
	f.Intrinsic.Control.EndIf

	f.Intrinsic.String.Format(v.Local.fProgLine,"#,###,###,##0.00",v.Local.sHold)
	gui.Form.txtProgLine.Text(v.Local.sHold)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Calculate_Progressive_Line.End

Program.Sub.txtPct_KeyPressEnter.Start
f.Intrinsic.Control.CallSub("Calculate_Progressive_Line")
Program.Sub.txtPct_KeyPressEnter.End

Program.Sub.txtPct_LostFocus.Start
f.Intrinsic.Control.CallSub("Calculate_Progressive_Line")
Program.Sub.txtPct_LostFocus.End

Program.Sub.cmdSave_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.fPct.Declare
	v.Local.fTotalLines.Declare
	v.Local.fProgLine.Declare
	v.Local.sHold.Declare
	v.Local.sFileName.Declare
	v.Local.sPath.Declare
	v.Local.sParam.Declare
	v.Local.sTemp.Declare	
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	
	f.Intrinsic.String.Replace(v.Screen.Form!txtPct.Text.Trim,",","",v.Local.fPct)
	f.Intrinsic.Control.If(v.Local.fPct,<=,0)
		f.Intrinsic.UI.Msgbox("Percentage must be greater than 0.","Attention")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Replace(v.Screen.Form!txtTotalLines.Text.Trim,",","",v.Local.fTotalLines)
	f.Intrinsic.String.Replace(v.Screen.Form!txtProgLine.Text.trim,",","",v.Local.fProgLine)
'	f.Intrinsic.Control.If(v.Local.fProgLine,<,0)
'		f.Intrinsic.UI.Msgbox("Progressive value must be greater than 0","Attention")
'		f.Intrinsic.Control.ExitSub	
'	f.Intrinsic.Control.EndIf

	'Upload Progress line	
	f.Intrinsic.UI.InvokeWaitDialog("Uploading Progressive Line")
	'Transaction 1+7+7 "O" for Order, then Customer, Order #
	f.Intrinsic.String.Build("Q{0} {1}",v.Global.sCustomer,v.Global.sOrder,v.Local.sTemp)
	
	'Part
	f.Intrinsic.String.Build("{0}PROGRESS",v.Local.sTemp,v.Local.sTemp)
	
	'Location and Product Line
	f.Intrinsic.String.RPad(v.Local.sTemp," ",53,v.Local.sTemp)
	F.Intrinsic.String.Build("{0}    ",v.Local.sTemp,V.Local.sTemp)
		
	'Description
	f.Intrinsic.String.RPad(v.Local.sTemp," ",60,v.Local.sTemp)
	F.Intrinsic.String.Build("{0}Progress Billing              ",V.Local.sTemp,V.Local.sTemp)
	
	'line number 700 and Type P
	f.Intrinsic.String.RPad(v.Local.sTemp," ",90,v.Local.sTemp)
	F.Intrinsic.String.Build("{0}700P",V.Local.sTemp,V.Local.sTemp)
	
	'quantity 9.4 13
	f.Intrinsic.String.RPad(v.Local.sTemp," ",94,v.Local.sTemp)
	F.Intrinsic.String.Build("{0}0000000010000",V.Local.sTemp,V.Local.sTemp)
				
	'price
	f.Intrinsic.String.RPad(v.Local.sTemp," ",117,v.Local.sTemp)
	f.Intrinsic.String.Format(v.Local.fProgLine,"0.000000",v.Local.sHold)
	f.Intrinsic.String.Replace(v.Local.sHold,".","",v.Local.sHold)
	F.Intrinsic.String.LPad(V.Local.sHold,"0",16,V.Local.sHold)
	F.Intrinsic.String.Build("{0}{1}",V.Local.sTemp,V.Local.sHold,V.Local.sTemp)
		
	'UM
	F.Intrinsic.String.RPad(V.Local.sTemp," ",283,V.Local.sTemp)
	F.Intrinsic.String.Build("{0}EA",V.Local.sTemp,V.Local.sTemp)
	
	F.Intrinsic.String.Build("SOLINESUPLOAD{0}{1}",V.Caller.Terminal,V.Caller.CompanyCode,V.Local.sFileName)
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sFileName,V.Local.sPath)
	F.Intrinsic.File.String2File(V.Local.sPath,V.Local.sTemp)
	
	'Upload
	f.Intrinsic.String.Build("{0}!*!Q!*!{1}",v.Global.sOrder,v.Local.sPath,v.Local.sParam)
	F.Global.General.CallWrapperSync(7020,v.Local.sParam)
	
	'As the Callwrapper does not follow the Order Line and Flag P as we specified, we need to update manually
	'Get Order Line just uploaded
	f.Intrinsic.String.Build("Select Max(Record_No) from QUOTE_LINES where QUOTE_NO = '{0}' and Part Like 'PROGRESS%'",V.Global.sOrder,V.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,<>,"")
		f.Intrinsic.String.Build("Update QUOTE_LINES set price = '{2}', extension = '{2}', discount_price = '{2}', price_quote = '{2}', price_disc_ord = '{2}', extension_quote = '{2}',  Line_Type = 'S', UM_Inventory = 'EA', Flag_Billing_Price = 'N', Flag_Purchased = 'N', Lotbin_Flg = 'N', Apply_Matl_schrg = 'N', Flag_data_cnv = '', Flag_Cogs = 'N', Flag_Bom = '' where QUOTE_NO = '{0}' and Record_No = '{1}'",v.Global.sOrder, v.Local.sRet, v.Local.fProgLine, v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.UI.CloseWaitDialog
	f.Intrinsic.Control.CallSub("Unload")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSave_Click.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$aanazco$}$20210830171409315$}$7aQAV3Tor/tR9bkuakHbuzQlHVuXCGOzCR9wnodKcxBIIZwEHCX21bYv26eZTAVbXZaCdiN2jrI=
Program.Sub.Comments.End